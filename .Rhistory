for (i in 1:3){
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])), verbose=TRUE, returntype="time", service="bing" )
}
from <- as.character(c("80007"))
to <- as.character(c("80031"))
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])), verbose=TRUE, returntype="time", service="bing" )
zips <- data.frame(from, to)
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])), verbose=TRUE, returntype="time", service="bing" )
for (i in 1:3){
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])), verbose=TRUE, returntype="time", service="bing" )
}
View(driveTimes)
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "80031"))
zips <- data.frame(from, to)
for (i in 1:3){
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])), verbose=TRUE, returntype="time", service="bing" )
}
View(driveTimes)
for (i in 1:1){
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])),
verbose=TRUE, returntype="time", service="bing" )
}
from <- as.character(c("80007"))
to <- as.character(c("80031"))
zips <- data.frame(from, to)
for (i in 1:1){
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])),
verbose=TRUE, returntype="time", service="bing" )
}
View(driveTimes)
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "80031"))
(i in 2:2)
for (i in 2:2){
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])),
verbose=TRUE, returntype="time", service="bing" )
}
c(as.character(zips[i,1]), as.character(zips[i,2]))
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "80031"))
zips <- data.frame(from, to)
c(as.character(zips[i,1]), as.character(zips[i,2]))
View(zips)
driveTimes <- georoute( c(as.character(zips[i,1]), as.character(zips[i,2])),
verbose=TRUE, returntype="time", service="bing" )
View(driveTimes)
str(zips)
zips <- data.frame(as.character(from), as.character(to)
str(zips)
zips <- data.frame(as.character(from), as.character(to))
str(zips)
zips <- data.frame(from, to)
str(zips)
zips[] <- lapply(zips, as.character)
str(zips)
driveTimes <- georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" )
View(driveTimes)
from <- as.character(c("80007"))
to <- as.character(c("80031"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
for (i in 1:length(zips$from)){
driveTimes <- georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" )
}
View(driveTimes)
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "80031"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
for (i in 1:length(zips$from)){
driveTimes <- georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" )
}
View(driveTimes)
from <- as.character(c("27205","48212"))
to <- as.character(c("54952","14450"))
combined <- data.frame(from, to)
combined[] <- lapply(combined, as.character)
for (i in 1:length(zips$from)){
driveTimes <- georoute( c(combined[i,1], combined[i,2]),
verbose=TRUE,
returntype="time",
service="bing" )
}
from <- as.character(c("27205","48212"))
to <- as.character(c("54952","14450"))
combined <- data.frame(from, to)
combined[] <- lapply(combined, as.character)
driveTimes <- georoute( c(combined[i,1], combined[i,2]),
verbose=TRUE,
returntype="time",
service="bing" )
for (i in 1:length(zips$from)){
driveTimes <- georoute( c(combined[i,1], combined[i,2]),
verbose=TRUE,
returntype="time",
service="bing" )
}
for (i in 1:length(combined$from)){
driveTimes <- georoute( c(combined[i,1], combined[i,2]),
verbose=TRUE,
returntype="time",
service="bing" )
}
View(driveTimes)
View(driveTimes)
from <- as.character("48212")
to <- as.character("14450")
combined <- data.frame(from, to)
combined[] <- lapply(combined, as.character)
21040/60
350/60
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "80031"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
for (i in 1:length(zips$from)){
driveTimes <- rbind(georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" ))
}
View(driveTimes)
to <- as.character(c("54952","14450", "80009"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
for (i in 1:length(zips$from)){
driveTimes <- rbind(georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" ))
}
to <- as.character(c("54952","14450", "32003"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
for (i in 1:length(zips$from)){
driveTimes <- rbind(georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" ))
}
for (i in 1:length(zips$from)){
driveTimes <- rbind(georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" ))
print(driveTimes)
}
for (i in 1:length(zips$from)){
driveTimes[i,] <- rbind(georoute( c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time", service="bing" ))
print(driveTimes)
}
View(driveTimes)
View(driveTimes)
verbose=TRUE, returntype="time", service="bing" ))
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "32003"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
for (i in 1:length(zips$from)){
driveTimes[i,] <- rbind(georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing"))
}
driveTimes <- NULL
for (i in 1:length(zips$from)){
driveTimes[i,] <- rbind(georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing"))
}
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
driveTimes <- as.data.frame(NULL)
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
driveTimes <- as.data.frame
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
for (i in 1:length(zips$from)){
driveTimes <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
View(driveTimes)
class(driveTimes)
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "32003"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
driveTimes <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
driveTimes <- data.frame(time=character(), stringsAsFactors=FALSE)
View(driveTimes)
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
View(driveTimes)
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "32003"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
driveTimes <- data.frame(time=character(), stringsAsFactors=FALSE)
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
driveTimes$mins <- driveTimes$time / 60
driveTimes$hours <- driveTimes$mins / 60
names(driveTimes)[1] <- "seconds"
driveTimes$mins <- driveTimes$time / 60
View(driveTimes)
driveTimes <- data.frame(time=character(), stringsAsFactors=FALSE)
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
View(driveTimes)
driveTimes$test <- driveTimes$time
driveTimes$mins <- driveTimes$time / 60
str(driveTimes)
driveTimes$time <- as.numeric(driveTimes$time)
driveTimes$mins <- driveTimes$time / 60
driveTimes$hours <- driveTimes$mins / 60
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "32003"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
driveTimes <- data.frame(time=character(), stringsAsFactors=FALSE)
for (i in 1:length(zips$from)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
driveTimes$time <- as.numeric(driveTimes$time)
driveTimes$mins <- driveTimes$time / 60
driveTimes$hours <- driveTimes$mins / 60
names(driveTimes)[1] <- "seconds"
View(driveTimes)
library(ggplot2)
library(rgdal)
library(mapview)
install.packages("mapview")
length(zips$from)
nrows(zips)
nrow(zips)
library("taRifx.geo")
from <- as.character(c("27205","48212", "80007"))
to <- as.character(c("54952","14450", "32003"))
zips <- data.frame(from, to)
zips[] <- lapply(zips, as.character)
driveTimes <- data.frame(time=character(), stringsAsFactors=FALSE)
for (i in 1:nrow(zips)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
driveTimes$time <- as.numeric(driveTimes$time)
driveTimes$mins <- driveTimes$time / 60
driveTimes$hours <- driveTimes$mins / 60
names(driveTimes)[1] <- "seconds"
View(driveTimes)
results <- cbind(zips, driveTimes)
View(results)
?taRifx.geo
for (i in 1:nrow(zips)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype = c("distance", "time")
service="bing")
}
for (i in 1:nrow(zips)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time"
service="bing")
}
for (i in 1:nrow(zips)){
driveTimes[i,] <- georoute(c(zips[i,1], zips[i,2]),
verbose=TRUE, returntype="time",
service="bing")
}
summary(driveTimes)
setwd("~/Desktop/Projects/digitRecognizer")
.libPaths("~/Desktop/R_Packages/")
# use SVM or KNN or some clustering algorithm
library("randomForest")
library("readr")
library("caret")
library("class")
train <- read_csv("../digitRecognizer/train.csv")
test <- read_csv("../digitRecognizer/test.csv")
test$label <- NA
combined <- rbind(train, test)
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
df <- as.data.frame(lapply(combined[,c(2:785)], normalize))
df[is.na(df)] <- 0
digit_train <- df[1:1000,]
digit_test <- df[1001:2000,]
digit_train_target <- combined[1:1000,1]
digit_test_target <- combined[1001:2000,1]
train <- read_csv("../digitRecognizer/train.csv")
test <- read_csv("../digitRecognizer/test.csv")
test$label <- NA
combined <- rbind(train, test)
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
TrainData <- train[1:5000,2:785]
TrainClasses <- as.factor(train[1:5000,1])
TestData <- train[21001:30000,2:785]
TestClass <- as.factor(train[21001:30000,1])
TrainClass <- as.factor(train[1:5000,1])
TrainClasses <- NULL
rm(TrainClasses)
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit1 <- train(TrainClass~TrainData,
method = "knn",
trControl = ctrl)
knnFit1 <- train(TrainData~TrainClass,
method = "knn",
trControl = ctrl)
knnFit1 <- train(TrainData~TrainClass,
method = "knn",
trControl = ctrl)
knnFit1 <- train(TrainData, TrainClass,
method = "knn",,
trControl = trainControl(method = "cv"))
knnPred <- predict(knnFit1, TestData)
?knn3
confusionMatrix(knnPred, TestClass)
table(knnPred, TestClass)
test <- table(knnPred, TestClass)
data.frame(knnPred, TestClass)
test <- data.frame(knnPred, TestClass)
View(test)
test$correct <- ifelse(test$knnPred == test$TestClass, "True", "False")
View(test)
summary(test)
test$correct <- as.factor(
ifelse(test$knnPred == test$TestClass, "True", "False"))
View(test)
summary(test)
630/8370
8370/9000
plot(knnFit1)
knnModel <- knn(train=TrainData, test=TestData, cl=TrainClass, k=5)
View(TrainData)
summary(TrainData)
results <- data.frame(knnModel, TestClass)
results$correct <- as.factor(
ifelse(results$knnModel == results$TestClass, "True", "False"))
summary(results)
8363/900
8363/9000
TrainData <- as.data.frame(lapply(TrainData[,c(2:785)], normalize))
TrainData[is.na(TrainData)] <- 0
TrainData <- as.data.frame(lapply(TrainData[ ,c(2:785)], normalize))
train <- read_csv("../recognizer/train.csv")
test <- read_csv("../recognizer/test.csv")
test$label <- NA
combined <- rbind(train, test)
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
df <- as.data.frame(lapply(combined[,c(2:785)], normalize))
df[is.na(df)] <- 0
train <- read_csv("../digitRecognizer/train.csv")
test <- read_csv("../digitRecognizer/test.csv")
test$label <- NA
combined <- rbind(train, test)
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
df <- as.data.frame(lapply(combined[,c(2:785)], normalize))
df[is.na(df)] <- 0
TrainData <- train[1:5000,2:785]
TrainClass <- as.factor(train[1:5000,1])
TestData <- train[21001:30000,2:785]
TestClass <- as.factor(train[21001:30000,1])
TrainData <- as.data.frame(lapply(TrainData[,c(1:784)], normalize))
TrainData[is.na(TrainData)] <- 0
TestData <- as.data.frame(lapply(TestData[,c(1:784)], normalize))
TestData[is.na(TestData)] <- 0
knnFit1 <- train(TrainData, TrainClass,
method = "knn",,
trControl = trainControl(method = "cv"))
knnPred <- predict(knnFit1, TestData)
confusionMatrix(knnPred, TestClass)
results <- data.frame(knnPred, TestClass)
results$correct <- as.factor(
ifelse(results$knnPred == results$TestClass, "True", "False"))
summary(results$correct)
8369/9000
badCols <- nearZeroVar(TrainData[,-1])
print(paste("Fraction of nearZeroVar columns:", round(length(badCols)/length(TrainData),4)))
TrainData <- TrainData[, -(badCols)]
TestData <- TestData[, -badCols]
knnFit1 <- train(TrainData, TrainClass,
method = "knn",,
trControl = trainControl(method = "cv"))
knnPred <- predict(knnFit1, TestData)
confusionMatrix(knnPred, TestClass)
results <- data.frame(knnPred, TestClass)
results$correct <- as.factor(
ifelse(results$knnPred == results$TestClass, "True", "False"))
summary(results$correct)
638/8362
8362/9000
train <- read_csv("../digitRecognizer/train.csv")
test <- read_csv("../digitRecognizer/test.csv")
test$label <- NA
combined <- rbind(train, test)
## Normalize - could not tell a difference in models -----------
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
## Split data for testing -------------
TrainData <- train[1:5000,2:785]
TrainClass <- as.factor(train[1:5000,1])
TestData <- train[21001:30000,2:785]
TestClass <- as.factor(train[21001:30000,1])
TrainData <- as.data.frame(lapply(TrainData[,c(2:785)], normalize))
TrainData[is.na(TrainData)] <- 0
TestData <- as.data.frame(lapply(TestData[,c(2:784)], normalize))
TestData[is.na(TestData)] <- 0
TrainData <- as.data.frame(lapply(TrainData[,c(2:784)], normalize))
TrainData[is.na(TrainData)] <- 0
train <- read_csv("../digitRecognizer/train.csv")
test <- read_csv("../digitRecognizer/test.csv")
## Normalize - could not tell a difference in models -----------
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
## Split data for testing -------------
TrainData <- train[1:5000,2:785]
TrainClass <- as.factor(train[1:5000,1])
TestData <- train[21001:30000,2:785]
TestClass <- as.factor(train[21001:30000,1])
TrainData <- as.data.frame(lapply(TrainData[,c(2:784)], normalize))
TrainData[is.na(TrainData)] <- 0
TestData <- as.data.frame(lapply(TestData[,c(2:784)], normalize))
TestData[is.na(TestData)] <- 0
TrainData <- train[1:5000,2:785]
TrainClass <- as.factor(train[1:5000,1])
TestData <- train[21001:30000,2:785]
TestClass <- as.factor(train[21001:30000,1])
TestClass
TrainData <- as.data.frame(lapply(TrainData[,c(1:784)], normalize))
TrainData[is.na(TrainData)] <- 0
TestData <- as.data.frame(lapply(TestData[,c(1:784)], normalize))
TestData[is.na(TestData)] <- 0
badCols <- nearZeroVar(TrainData[,-1])
print(paste("Fraction of nearZeroVar columns:", round(length(badCols)/length(TrainData),4)))
TrainData <- TrainData[, -(badCols)]
TestData <- TestData[, -badCols]
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit1 <- train(TrainData, TrainClass,
method = "knn",,
trControl = ctrl)
knnPred <- predict(knnFit1, TestData)
confusionMatrix(knnPred, TestClass)
results <- data.frame(knnPred, TestClass)
results$correct <- as.factor(
ifelse(results$knnPred == results$TestClass, "True", "False"))
summary(results$correct)
knnFit1 <- train(TrainData, TrainClass,
method = "knn",,
trControl = ctrl, tuneLength = 20)
train <- read_csv("../digitRecognizer/train.csv")
test <- read_csv("../digitRecognizer/test.csv")
## Normalize - could not tell a difference in models -----------
normalize <- function(x) {
return( (x - min(x)) / (max(x) - min(x)) )
}
## Split data for testing -------------
TrainData <- train[1:5000,2:785]
TrainClass <- as.factor(train[1:5000,1])
TestData <- train[21001:30000,2:785]
TestClass <- as.factor(train[21001:30000,1])
TrainData <- as.data.frame(lapply(TrainData[,c(1:784)], normalize))
TrainData[is.na(TrainData)] <- 0
TestData <- as.data.frame(lapply(TestData[,c(1:784)], normalize))
TestData[is.na(TestData)] <- 0
## Remove columns with 0 variance - they tell no story -----------
badCols <- nearZeroVar(TrainData[,-1])
print(paste("Fraction of nearZeroVar columns:", round(length(badCols)/length(TrainData),4)))
TrainData <- TrainData[, -(badCols)]
TestData <- TestData[, -badCols]
## Removing columns does not improve the accuracy, but makes the model run faster -------
ctrl <- trainControl(method="repeatedcv",repeats = 3)
knnFit1 <- train(TrainData, TrainClass,
method = "knn",,
trControl = ctrl)
